{"remainingRequest":"/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/matshidiso/staticsites/skhokho/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/matshidiso/staticsites/skhokho/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/matshidiso/staticsites/skhokho/docs/accounting/clients.md?vue&type=template&id=35587ace&","dependencies":[{"path":"/Users/matshidiso/staticsites/skhokho/docs/accounting/clients.md","mtime":1644245052619},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJjbGllbnRzIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjbGllbnRzIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgQ2xpZW50cyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vc2tob2toby5pby9hY2NvdW50aW5nL2FjY291bnRpbmctY2xpZW50cy92aWV3IiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJDbGllbnQgdmlldyBwYWdlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGNhbiBiZSBmb3VuZCBoZXJlLiBIZXJlIHlvdSBjYW4gc2VlIGEgbGlzdCBvZiBhbGwgeW91ciBjbGllbnRzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2sgdGlwIiB9LCBbCiAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrLXRpdGxlIiB9LCBbX3ZtLl92KCJUSVAiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQmVjYXVzZSBTa2hva2hvIGlzIGFuIGludGVncmF0ZWQgc29mdHdhcmUsIHRoZSBjbGllbnRzIHlvdSBzZWUgaGVyZSwgYXJlIHRoZSBzYW1lIGNsaWVudHMgdGhhdCBhcmUgb24gdGhlIFByb2plY3QgYXBwLCB2aXNpYmxlIHRvIHRoZSBwcm9qZWN0IHRlYW0uIEFzIHRoZXkgY3JlYXRlIHByb2plY3RzLCBhc3NpZ24gdGhlbSB0byBjbGllbnRzIC0gdGhleSBjYW4gcGljayBjbGllbnRzIGZyb20gdGhpcyBsaXN0IG9yIGFkZCB0byBpdC4gQXMgdGhlIGFjY291bnRpbmcgdGVhbSBjcmVhdGVzIGludm9pY2VzLCBhbmQgcXVvdGVzIC0gdGhleSBjYW4gYXNzaWduIHRoZW0gdG8gY2xpZW50cyB3aG8gYXJlIGFscmVhZHkgb24gdGhlIHN5c3RlbSB3aXRoIGFjdGl2ZSBwcm9qZWN0cy4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYWRkLW5ldy1jbGllbnQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2FkZC1uZXctY2xpZW50IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBZGQgbmV3IGNsaWVudCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1RvIGFkZCBhIG5ldyBjbGllbnQsIGNsaWNrIG9uIHRoZSAiYWRkIG5ldyBjbGllbnQiIGJ1dHRvbiBhdCB0aGUgdG9wIG9mIHRoZSBwYWdlLicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogIi9pbWcvYWNjb3VudGluZ19hcHBfYWRkX25ld19jbGllbnQucG5nIiwKICAgICAgICAgICAgYWx0OiAiQWNjb3VudGluZyBBcHAgQWRkIE5ldyBDbGllbnQiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIllvdSB3aWxsIG5lZWQgdG8gcHJvdmlkZSB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQ29tcGFueSBOYW1lIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJDb21wYW55IEVtYWlsIEFkZHJlc3MiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkNvbnRhY3QgUGhvbmUgTnVtYmVyIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJDb21wYW55IFNpemUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkNvbXBhbnkgSW5kdXN0cnkiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJUaGVuIHNhdmUgdGhlIGZvcm0gYW5kIGEgbmV3IGNsaWVudCB3aWxsIGJlIGFkZGVkLiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiAiL2ltZy9hY2NvdW50aW5nX3NvZnR3YXJlX2NsaWVudF9saXN0LnBuZyIsCiAgICAgICAgICAgIGFsdDogIkFjY291bnRpbmcgU29mdHdhcmUgQ2xpZW50IExpc3QiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAib3B0aW9ucy1hdmFpbGFibGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI29wdGlvbnMtYXZhaWxhYmxlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgT3B0aW9ucyBBdmFpbGFibGUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJFZGl0IGNsaWVudCBpbmZvcm1hdGlvbiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmlldyBjbGllbnQgZGV0YWlscyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiRGVsZXRlIGEgY2xpZW50IGZpbGUiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImVkaXQtY2xpZW50LWluZm9ybWF0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNlZGl0LWNsaWVudC1pbmZvcm1hdGlvbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEVkaXQgQ2xpZW50IEluZm9ybWF0aW9uIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gZWRpdCB0aGUgY2xpZW50IGluZm9ybWF0aW9uLCBjbGljayBvbiB0aGUgYWN0aW9uIGNvbHVtbiBhbmQgZWRpdCBhY2NvcmRpbmdseS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ2aWV3LWNsaWVudC1kZXRhaWxzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN2aWV3LWNsaWVudC1kZXRhaWxzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVmlldyBDbGllbnQgRGV0YWlscyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkNsaWNrIG9uIHRoZSBjbGllbnQgbmFtZSB0byBiZSByb3V0ZWQgdG8gdGhlIGRldGFsZWQgcGFnZSB3aWNoIGxvb2tzIGxpa2UgdGhpcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICIvaW1nL2FjY291bnRpbmdfc29mdHdhcmVfZGV0YWlsZWRfY2xpZW50X3BhZ2UucG5nIiwKICAgICAgICAgICAgYWx0OiAiQWNjb3VudGluZyBTb2Z0d2FyZSBEZXRhaWxlZCBDbGllbnQgUGFnZSIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVGhlIGNsaWVudCBkZXRhaWxlZCBwYWdlIGhhcyA1IHRhYnMiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkRldGFpbGVkIHBhZ2UgLSB3aXRoIGNvbnRhY3QgaW5mb3JtYXRpb24gb2YgdGhlIGNsaWVudCBhbmQgaGlnaCBsZXZlbCBzdGF0aXN0aWNzIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlByb2plY3RzIHBhZ2Ugd2l0aCBhbGwgdGhlIGN1cnJlbnQgcHJvamVjdHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBjbGllbnQiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ29udGFjdHMgcGFnZSAtIHdpdGggYWxsIHRoZSBjbGllbnQgY29udGFjdHMsIGluZGl2aWR1YWxzIHdpdGhpbiB0aGUgY2xpZW50IG9yZ2FuaXNhdGlvbiB3ZSBoYXZlIGNvbnRhY3QgaW5mb3JtYXRpb24gZm9yIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlF1b3RlcyAtIGFsbCBxdW90ZXMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY2xpZW50IildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJJbnZvaWNlcyAtIGFsbCBpbnZvaWNlcyBhc3NvY2lhdGVkIHdpdGggdGhlIGNsaWVudCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkZvciBleGFtcGxlLCB0aGUgaW52b2ljZSBsaXN0IHBhZ2Ugd2lsbCBsb29rIGxpa2UgdGhpczoiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICIvaW1nL2FjY291bnRpbmdfc29mdHdhcmVfZGV0YWlsZWRfY2xpZW50X2ludm9pY2VzLnBuZyIsCiAgICAgICAgICAgIGFsdDogIkFjY291bnRpbmcgU29mdHdhcmUgRGV0YWlsZWQgQ2xpZW50IEludm9pY2VzIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}