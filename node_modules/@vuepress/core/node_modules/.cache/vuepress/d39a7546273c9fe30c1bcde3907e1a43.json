{"remainingRequest":"/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/matshidiso/staticsites/skhokho/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/matshidiso/staticsites/skhokho/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/matshidiso/staticsites/skhokho/docs/okr/index.md?vue&type=template&id=49ca1a2a&","dependencies":[{"path":"/Users/matshidiso/staticsites/skhokho/docs/okr/index.md","mtime":1641403972888},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}