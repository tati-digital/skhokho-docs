{"remainingRequest":"/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/matshidiso/staticsites/skhokho/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/matshidiso/staticsites/skhokho/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/matshidiso/staticsites/skhokho/docs/accounting/index.md?vue&type=template&id=ec204ae2&","dependencies":[{"path":"/Users/matshidiso/staticsites/skhokho/docs/accounting/index.md","mtime":1641403771673},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJhY2NvdW50aW5nLWFwcCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjYWNjb3VudGluZy1hcHAiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFjY291bnRpbmcgQXBwIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIEFjY291bnRpbmcgQXBwIGlzIGRlc2lnbmVkIHRvIGJlIGEgbGlnaHR3ZWlnaHQgYWNjb3VudGluZyBtYW5hZ2VtZW50IHNvZnR3YXJlIGZvciBzbWFsbCBidXNpbmVzcywgdG8gaGVscCB0ZWFtcyBrZWVwIHRyYWNrIG9mIHByb2plY3QgYW5kIGJ1c2luZXNzIGludm9pY2VzLCBxdW90ZXMgYW5kIGV4cGVuc2VzLiBJbiBhZGRpdGlvbiBvbmUgY2FuIGFsc28gdHJhY2sgdmVuZG9ycyBhbmQgY2xpZW50cyAtIGFuZCBhc3NvY2lhdGUgdGhlbSB3aXRoIGludm9pY2VzIGFuZCBleHBlbnNlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVGhlIGZvbGxvd2luZyBmZWF0dXJlcyBhcmUgYXZhaWxhYmxlIGluIHRoZSBBcHAiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkFkZCBhbmQgbWFuYWdlIGNsaWVudCBsaXN0cyAoaW4gcGFyYWxsZWwgdG8gcHJvamVjdCBjbGllbnQgbGlzdHMpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkJ1c2luZXNzIHByb2R1Y3RzIGFuZCBzZXJ2aWNlcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmVuZG9ycyAtIHBlb3BsZSB3ZSBwYXkgZm9yIHNlcnZpY2VzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJCdXNpbmVzcyBxdW90ZXMiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkludm9pY2VzIC0gbW9uZXkgY29taW5nIGluIHRvIHRoZSBidXNpbmVzcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQWRkIGFuZCBtYW5hZ2UgRXhwZW5zZXMiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2sgdGlwIiB9LCBbCiAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrLXRpdGxlIiB9LCBbX3ZtLl92KCJUSVAiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiWW91IHdpbGwgbmVlZCBhY2Nlc3MgdG8gdGhlIEFjY291bnRpbmcgQXBwIGZyb20geW91ciBsaW5lIG1hbmFnZXIgdG8gYWNjZXNzIHRoZSBmZWF0dXJlcyBkZXNjcmliZWQgaW4gdGhpcyBkb2N1bWVudGF0aW9uLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhY2NvdW50aW5nLXNldHRpbmdzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhY2NvdW50aW5nLXNldHRpbmdzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQWNjb3VudGluZyBTZXR0aW5ncyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJTdGFydCBvbiB0aGlzICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3NraG9raG8uaW8vYWNjb3VudGluZy9jb21wYW55LXNldHRpbmdzIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJBY2NvdW50aW5nIFNldHRpbmdzIFBhZ2UiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIsIHRvIGNoYW5nZSB0aGUgc2V0dGluZ3MgZm9yIHlvdXIgb3JnYW5pc2F0aW9uJ3MgYWNjb3VudGluZyB0ZWFtLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2sgdGlwIiB9LCBbCiAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrLXRpdGxlIiB9LCBbX3ZtLl92KCJUSVAiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIGluZm9ybWF0aW9uIHlvdSBlbnRlciBoZXJlIHdpbGwgYXBwZWFyIGluIGFsbCB5b3VyIHF1b3RlcywgaW52b2ljZXMgYW5kIGV4cGVuc2VzLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICIvaW1nL2FjY291bnRpbmdfc29mdHdhcmVfc2V0dGluZ3NfcGFnZS5wbmciLAogICAgICAgICAgICBhbHQ6ICJBY2NvdW50aW5nIFNvZnR3YXJlIFNldHRpbmdzIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkl0IGlzIGltcG9ydGFudCB0aGF0IHlvdSBzdGFydCBieSBzZXR0aW5nIHRoaXMgaW5mb3JtYXRpb24gYXQgdGhlIGJlZ2lubmluZyBvZiB5b3VyIHNldC11cCBhbmQgdGVzdCB0aGUgU01UUCBzZXR0aW5ncy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJFbnRlciBhbGwgeW91ciBidXNpbmVzcyBpbmZvcm1hdGlvbiBhcyB5b3UgbmVlZCBpdCB0byBhcHBlYXIgaW4geW91ciBvZmZpY2lhbCBhY2NvdW50aW5nIGRvY3MuIEVudGVyIHRoZSBTTVRQIHNldHRpbmdzIGZvciB0aGUgZW1haWwgYWRkcmVzcyB5b3Ugd291bGQgbGlrZSB0byB1c2UgdG8gZW1haWwgY2xpZW50cyB3aXRoIGludm9pY2VzIGFuZCBxdW90ZXMuXG5UaGlzIGlzIHNvIHRoYXQgY2xpZW50cyBzZWUgeW91ciBjb21wYW55IGRvbWFpbiBmcm9tIHlvdXIgaW52b2ljZXMgYW5kIGFzc29jaWF0ZSB5b3VyIGludm9pY2VzIHdpdGggeW91ciBidXNpbmVzcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhY2NvdW50aW5nLWRhc2hib2FyZCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYWNjb3VudGluZy1kYXNoYm9hcmQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBY2NvdW50aW5nIERhc2hib2FyZCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBhY2NvdW50aW5nIGRhc2hib2FyZCBnaXZlcyB5b3UgYSBxdWljayBzbmFwc2hvdCBvZiB0aGUgY3VycmVudCBzdGF0ZSBvZiBhZmZhaXJzIHdpdGhpbiB0aGUgYnVzaW5lc3MuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiAiL2ltZy9hY2NvdW50aW5nX3NvZnR3YXJlX2Rhc2hib2FyZC5wbmciLAogICAgICAgICAgICBhbHQ6ICJBY2NvdW50aW5nIFNvZnR3YXJlIERhc2hib2FyZCIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhY2NvdW50aW5nLXJlcG9ydCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYWNjb3VudGluZy1yZXBvcnQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBY2NvdW50aW5nIFJlcG9ydCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1lvdSBjYW4gcHJpbnQgb3V0IGEgc25hcHNob3QgcmVwb3J0IG9mIHRoZSBjdXJyZW50IGFjY291bnRpbmcgZGF0YSBhbmQgYW5hbHl0aWNzIGZyb20gdGhlIGFjY291bnRpbmcgZGFzaGJvYXJkLiBJbiBvcmRlciB0byBwcmludCB0aGUgcmVwb3J0LCBjbGljayBvbiB0aGUgInJlcG9ydCIgYnV0dG9uIGF0IHRoZSB0b3Agb2YgdGhlIHBhZ2UuJwogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiAiL2ltZy9hY2NvdW50aW5nX3NvZnR3YXJlX3JlcG9ydC5wbmciLAogICAgICAgICAgICBhbHQ6ICJBY2NvdW50aW5nIFNvZnR3YXJlIFJlcG9ydCIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrIHRpcCIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgW192bS5fdigiVElQIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkJvdGggdGhlIGFjY291bnRpbmcgcmVwb3J0IGFuZCBkYXNoYm9hcmQgYW5hbHl0aWNzIGFyZSBkZXBlbmRlbnQgb24gdGhlIGZpbmFuY2lhbCB5ZWFyIHlvdSBoYXZlIHNldCBpbiB5b3VyIHNldHRpbmdzLCBpZiB5b3UgbGVhdmUgaXQgYmxhbmsgdGhlIGRlZmF1bHQgc3RhcnQgbW9udGggd2lsbCBiZSBKYW51YXJ5LiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}