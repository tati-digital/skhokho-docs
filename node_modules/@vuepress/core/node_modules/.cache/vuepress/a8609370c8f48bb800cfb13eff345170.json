{"remainingRequest":"/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/matshidiso/staticsites/skhokho/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/matshidiso/staticsites/skhokho/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/matshidiso/staticsites/skhokho/docs/accounting/invoices.md?vue&type=template&id=c99eb47a&","dependencies":[{"path":"/Users/matshidiso/staticsites/skhokho/docs/accounting/invoices.md","mtime":1634763753885},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/matshidiso/staticsites/skhokho/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJpbnZvaWNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjaW52b2ljZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEludm9pY2VzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaW52b2ljZS1saXN0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNpbnZvaWNlLWxpc3QiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEludm9pY2UgTGlzdCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgYWNjb3VudGluZyAtICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3NraG9raG8uaW8vYWNjb3VudGluZy9pbnZvaWNlcy92aWV3IiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJpbnZvaWNlIGxpc3QiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcGFnZSBzaG93cyBhbGwgdGhlIGN1cnJlbnQgaW52b2ljZXMgYXZhaWxhYmxlIGZvciB5b3VyIGJ1c2luZXNzLiBZb3UgY2FuIHNlZSB0aGUgZGV0YWlscyBvZiB0aGUgaW52b2ljZSwgYW5kIHN0YXR1cyBmcm9tIHRoaXMgcGFnZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6ICIvaW1nL2ludm9pY2VfbGlzdC5wbmciLCBhbHQ6ICJpbnZvaWNlIExpc3QiIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdBdCB0aGUgdG9wIG9mIHRoZSBwYWdlLCB5b3UgY2FuIGNsaWNrIG9uIHRoZSAiQWRkIE5ldyBJbnZvaWNlIiBidXR0b24gdG8gYWRkIGEgbmV3IGludm9pY2UuJwogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYWRkLW5ldy1pbnZvaWNlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNhZGQtbmV3LWludm9pY2UiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFkZCBOZXcgSW52b2ljZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1doZW4geW91IGNsaWNrIG9uIHRoZSAiYWRkIGludm9pY2UiIGJ1dHRvbiwgYSBuZXcgYmxhY2sgaW52b2ljZSBpbnN0YW5jZSBpcyBjcmVhdGVkLCB5b3UgbmVlZCB0byBidWlsZCB0aGUgaW52b2ljZSBvYmplY3RzIG9uZSBhdCBhIHRpbWUgdG8gcG9wdWxhdGUgdGhlIGludm9pY2UuXG4nCiAgICAgICAgKSwKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2ltZy9pbnZvaWNlX3NwYWNlLnBuZyIsIGFsdDogIkludm9pY2UgTGlzdCIgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImFkZC1pbnZvaWNlLWxpbmUtaXRlbXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2FkZC1pbnZvaWNlLWxpbmUtaXRlbXMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBZGQgaW52b2ljZSBMaW5lIEl0ZW1zIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQ2xpY2sgb24gdGhlIGFkZCBpbnZvaWNlIGxpa2UgaXRlbXMgYXQgdGhlIHRvcCBvZiB0aGUgcGFnZSB0byBhZGQgbGluZSBpdGVtcyB0byB0aGUgaW52b2ljZS4gQSBuZXcgcG9wLXVwIGZvcm0gd2lsbCBhcHBlYXIgLSB5b3UgY2FuIG5vdyBhZGQgcHJvZHVjdHMgYW5kIHNlcnZpY2VzIGFzIGxpbmUgaXRlbXMgdG8gdGhlIGludm9pY2U6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2ltZy9hZGRfaW52b2ljZV9pdGVtLnBuZyIsIGFsdDogImludm9pY2UgTGluZSBJdGVtcyIgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIllvdSBoYXZlIGFuIG9wdGlvbiB0byBzZWxlY3QgZnJvbSBleGlzdGluZyBwcm9kdWN0cyBhbmQgc2VydmljZXMsIG9yIGFkZCBuZXcgcHJvZHVjdHMgYW5kIHNlcnZpY2VzLiBXaGVuIHlvdSBhZGQgYSBuZXcgcHJvZHVjdC9zZXJ2aWNlIC0gaXQgd2lsbCBiZSBhdmFpbGFibGUgdG8gc2VsZWN0IGZyb20gaW4gZnV0dXJlIGludm9pY2VzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJZb3UgbXVzdCBlbnRlcjoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlRpdGxlIG9mIHRoZSBsaW5lIGl0ZW0iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlByaWNlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJRdWFudGl0eSIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91IHdpbGwgbm93IHNlZSBtb3JlIG9mIHRoZSBmb3JtLCB5b3UgY2FuIGNvbnRpbnVlIHRvIGFkZCBsaW5lIGl0ZW1zIGFzIGRlc2NyaWJlZCBhYm92ZSBvciBjb250aW51ZSB3aXRoIGFkZGluZyBhIG5ldyBjbGllbnQgdG8gdGhlIGZvcm0uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiAiL2ltZy9pbnZvaWNlX21vcmUucG5nIiwKICAgICAgICAgICAgYWx0OiAiTW9yZSBvZiB0aGUgSW52b2ljZSBmb3JtIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImFkZC1hLWNsaWVudCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjYWRkLWEtY2xpZW50IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBZGQgQSBDbGllbnQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdDbGljayBvbiB0aGUgImFkZCBjbGllbnQgYnV0dG9uIiBvbiB0aGUgdG9wIGxlZnQgc2lkZSBvZiB0aGUgcGFnZSB0byBhZGQgYSBuZXcgY2xpZW50LicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7IHNyYzogIi9pbWcveHh4X2NsaWVudC5wbmciLCBhbHQ6ICJBZGQgTmV3IENsaWVudCIgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJBIHBvcCB1cCBmb3JtIHdpbGwgYXBwZWFyLCB5b3UgaGF2ZSB0d28gb3B0aW9ucyBhdCB0aGlzIHN0YWdlOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkNob3NlIGFuIGV4aXN0aW5nIGNsaWVudCBmcm9tIHRoZSBkcm9wZG93biBsaXN0IildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBZGQgY29tcGxldGVseSBuZXcgY2xpZW50IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVG8gYWRkIGEgbmV3IGNsaWVudCBlbnRlciB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidGFibGUiLCBbCiAgICAgICAgX2MoInRoZWFkIiwgWwogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGgiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogInJpZ2h0IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkZvcm0gRmllbGRzIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInRib2R5IiwgWwogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogInJpZ2h0IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNvbXBhbnkgTmFtZSIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogInJpZ2h0IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkVtYWlsIEFkZHJlc3MiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJyaWdodCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJQaG9uZSBOdW1iZXIiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJyaWdodCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJUYXggTnVtYmVyIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAicmlnaHQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkcmVzcyBsaW5lIDEiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJyaWdodCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaXR5IikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAicmlnaHQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiUHJvdmluY2UiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJyaWdodCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDb3VudHJ5IikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAicmlnaHQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiUG9zdGFsIENvZGUiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPbmNlIHlvdSBlbnRlciB0aGUgY2xpZW50IGRldGFpbHMsIHlvdSB3aWxsIHNlZSB0aGVtIHJlZmxlY3RlZCBiYWNrIG9uIHRoZSBpbnZvaWNlLiBJbiBhZGRpdGlvbiB5b3Ugd2lsbCBzZWUgeW91ciBvd24gY29tcGFueSBkZXRhaWxzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7IHNyYzogIi9pbWcveXl5X2RldGFpbC5wbmciLCBhbHQ6ICJpbnZvaWNlIERldGFpbHMiIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGVyZSBhcmUgYnV0dG9ucyB0byBhbGxvdyB5b3UgdG8gZWRpdCBhbnkgb2YgdGhlIGluZm9ybWF0aW9uIG9uIHRoZSBpbnZvaWNlIGF0IHRoaXMgc3RhZ2UsIGluY2x1ZGluZyB0aGUgY29tcGFueSBsb2dvLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2sgdGlwIiB9LCBbCiAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrLXRpdGxlIiB9LCBbX3ZtLl92KCJUSVAiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIENvbXBhbnkgaW5mb3JtYXRpb24gc2hvd24gaXMgc2V0LXVwIGluIHRoZSBhY2NvdW50aW5nIHNldHRpbmdzIHBhZ2UiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZWRpdC1pbnZvaWNlLWRldGFpbHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2VkaXQtaW52b2ljZS1kZXRhaWxzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRWRpdCBJbnZvaWNlIERldGFpbHMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBdCB0aGlzIHN0YWdlLCB5b3UgY2FuIGVkaXQgdGhlIHJlbWFpbmluZyBkZXRhaWxzIGZvciB0aGUgaW52b2ljZS5cbllvdSBjYW4gZW50ZXIgdGhlIGZvbGxvd2luZzoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUaXRsZSBvZiB0aGUgaW52b2ljZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQ2hlY2sgd2hldGhlciBpdCBpcyBhIHJlY3VycmluZyBpbnZvaWNlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJEdWUgZGF0ZSBmb3IgdGhlIGludm9pY2UiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkRlc2NyaXB0aW9uIG9mIHRoZSBpbnZvaWNlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBZGRpdGlvbmFsIE5vdGVzIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6ICIvaW1nL2ludm9pY2VfZGV0YWlsLnBuZyIsIGFsdDogIkludm9pY2UgRGV0YWlscyIgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImFzc2lnbi1pbnZvaWNlLXRvLXByb2plY3QiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Fzc2lnbi1pbnZvaWNlLXRvLXByb2plY3QiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBc3NpZ24gaW52b2ljZSB0byBwcm9qZWN0IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91IGNhbiBhbHNvIGFzc2lnbiBzcGVjaWZpYyBpbnZvaWNlcyB0byBwcm9qZWN0cy4gVGhpcyBpcyByZWNvbW1lbmRlZCBpZiB0aGUgaW52b2ljZSBiZWxvbmdzIHRvIGEgcHJvamVjdCwgdGhlIHJldmVudWUgY29sbGVjdGVkIGZyb20gdGhlIGludm9pY2Ugd2lsbCBiZSBhZGRlZCB0byB0aGUgY2xpZW50IGFuZCBwcm9qZWN0IGxpZmV0aW1lIHZhbHVlLCB0byBoZWxwIHRoZSBvcmdhbmlzYXRpb24gY2FsY3VsYXRlIHRoZSB2YWx1ZSBvZiBjbGllbnRzIGFuZCBwcm9qZWN0cy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICIvaW1nL2FkZF9wcm9qZWN0X3RvX2ludm9pY2UucG5nIiwKICAgICAgICAgICAgYWx0OiAiQWRkIFByb2plY3QgdG8gSW52b2ljZSIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB5b3UgaGF2ZSBub3QgZW50ZXJlZCBhIHByb2plY3QgeWV0IGluIHRoZSBzeXN0ZW0sIGVudGVyIGl0IGZpcnN0IC0gdGhlbiByZXR1cm4gdG8gYXNzaWduIHRoZSBpbnZvaWNlIHRvIGl0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImludm9pY2UtYWN0aW9ucyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjaW52b2ljZS1hY3Rpb25zIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBJbnZvaWNlIEFjdGlvbnMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiWW91IGNhbiBlaXRoZXI6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWaWV3IGludm9pY2UgUERGIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJFbWFpbCBpbnZvaWNlIHRvIGNsaWVudCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jayB0aXAiIH0sIFsKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2stdGl0bGUiIH0sIFtfdm0uX3YoIlRJUCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJXaGVuIHlvdSBlbWFpbCB0byBjbGllbnQsIHRoZSBjb250YWN0IGRldGFpbHMgcHJvdmlkZWQgZm9yIHRoZSBjbGllbnQgb24gdGhlIGZvcm0gd2lsbCBiZSB1c2VkIHRvIHNlbmQgdGhlIGVtYWlsLiBUaGUgY2xpZW50IHdpbGwgcmVjZWl2ZSB0aGUgaW52b2ljZSBhcyBhbiBhdHRhY2htZW50IHRvIGFuIGVtYWlsIHdpdGggeW91ciBjb250YWN0IGRldGFpbHMgdG8gZm9sbG93IHVwLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}